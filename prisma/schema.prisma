generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String   @id @default(auto()) @map("_id") @db.ObjectId
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.String
  access_token       String?  @db.String
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.String
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@index([userId])
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          String    @default("user")
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum ServiceCategory {
  Men
  Women
  Kid
}

enum Interval {
  M15
  M30
  M45
  M60
}

enum Duration {
  M15
  M30
  M45
  M60
}

model Service {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String    @unique

  description   String?
  
  startDate     DateTime
  endDate       DateTime?
  
  startTime     String
  endTime       String

  price         String
  image         String?

  staffIds       String[]  @db.ObjectId
  staffs         Staff[]   @relation(fields: [staffIds], references: [id])

  appointments  Appointment[]

  category      ServiceCategory
  interval      Interval
  duration      Duration
}

enum Roles {
  Admin
  Designer
}


model Staff {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String   @unique
  description String? 

  serviceIds       String[]  @db.ObjectId
  services         Service[]   @relation(fields: [serviceIds], references: [id])

  appointments  Appointment[]

  breaks Break[]

  role        Roles
}

model PopUp {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  startDate   DateTime
  endDate     DateTime?
}

model Appointment {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  price       String
  status      String

  from_date   DateTime
  to_date     DateTime
  duration    String

  customer_name   String
  customer_number String
  customer_email  String

  service_name String
  staff_name   String
  
  service         Service   @relation(fields: [serviceId], references: [id])
  serviceId       String  @db.ObjectId

  staff         Staff   @relation(fields: [staffId], references: [id])
  staffId       String  @db.ObjectId

  google_calendar_event_id  String?
}

model Break {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId

  name        String

  from_datetime   DateTime
  to_datetime     DateTime

  staff         Staff   @relation(fields: [staffId], references: [id])
  staffId       String  @db.ObjectId
}